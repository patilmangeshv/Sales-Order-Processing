import { LocalDataStorage } from '../../utils/utilities';

export class Dealer {
    /**Unique DB ID*/
    dealerID: string;
    /**Unique code generated by application.*/
    dealerCode: string;
    companyCode: string;
    /**Dealer has their internal system to manage the items which is linked with this app.
     * 1. While placing the order customer details will be linked with the external system which will pre-populate the customer details and not allowed to change.
     * 2. If the logged in user is salesperson, then he is only allowed to select the customers from the list.
     * 3. If the logged in user is customer, then the details will be pre-populted and and not allowed to change.
     * 
    */
    hasExternalSystem: boolean;
    dealerName: string;
    dealerEmailAddress?: string;
    address: string;
    /**URL for the dealer logo.*/
    dealerLogoURL?: string;
    /**Instructions from dealer (if any). 
     * Dealer can show the message to the customer while placing the order. 
     * The instructions could be the payment method and payment information like BHIM payment ID.*/
    instructions: string;
    /**Minimum order amount for the delivery. The customer has to place the order
     * for this minimum amount for the delivery. NULL means no minimum order amount.
    */
    minimumOrderAmount: number;
    /**Total amount of the order till now by the customers.*/
    totalOrderedAmount?: number;
    /**Total count of the order placed by the customers.*/
    countOfTheOrdersPlaced?: number;
    isActive: boolean;
}

/**Static data cached version control class to keep track on changes done in the static data document in order
 * to handle caching of the data. It holds the server version when the data is changed.
  */
export class StaticDataCachedVer {
    /**Version of customer document.*/
    verCustomer: firebase.firestore.FieldValue;
    /**Version of itemStockPrice document.*/
    verItemStockPrice: firebase.firestore.FieldValue;
    /**Version of salesperson document.*/
    verSalesperson: firebase.firestore.FieldValue;
}

export class TrackStaticDataCache {
    private static _localStaticDataCachedVer: StaticDataCachedVer;

    /**Initialize static data.*/
    static async initialize() {
        TrackStaticDataCache._localStaticDataCachedVer = await LocalDataStorage.getObject("localStaticDataCachedVer");
        // if local static data is not found then initialise it to a new instance
        if (!TrackStaticDataCache._localStaticDataCachedVer) TrackStaticDataCache._localStaticDataCachedVer = new StaticDataCachedVer();
    }

    static async staticDataChanged(newValue: StaticDataCachedVer) {
        // if new value is undefined or null exit from the function
        if (!newValue) return;

        if (TrackStaticDataCache._localStaticDataCachedVer.verCustomer != newValue.verCustomer) {
            TrackStaticDataCache._updateCache4Customer = true;
            // update local copy with new data
            TrackStaticDataCache._localStaticDataCachedVer.verCustomer = newValue.verCustomer;
        }

        if (TrackStaticDataCache._localStaticDataCachedVer.verItemStockPrice != newValue.verItemStockPrice) {
            TrackStaticDataCache._updateCache4ItemStockPrice = true;
            // update local copy with new data
            TrackStaticDataCache._localStaticDataCachedVer.verItemStockPrice = newValue.verItemStockPrice;
        }

        if (TrackStaticDataCache._localStaticDataCachedVer.verSalesperson != newValue.verSalesperson) {
            TrackStaticDataCache._updateCache4Salesperson = true;
            // update local copy with new data
            TrackStaticDataCache._localStaticDataCachedVer.verSalesperson = newValue.verSalesperson;
        }
        // Store the object in to the local storage
        await LocalDataStorage.setObject("localStaticDataCachedVer", TrackStaticDataCache._localStaticDataCachedVer);
    }

    private static _updateCache4Customer: boolean = false;
    /**Gets if the Customer data should be fetched from server or not. If it is true, means the data has changed on server
     * and needs to refetch it to refresh the local cache copy of Customer doument data.*/
    public static get updateCache4Customer(): boolean {
        if (TrackStaticDataCache._updateCache4Customer) {
            // The property read once so now set it to false expecting the customer's new data will be fetched and cached locally.
            TrackStaticDataCache._updateCache4Customer = false;
            return true;
        } else
            return false;
    }

    private static _updateCache4ItemStockPrice: boolean = false;
    /**Gets if the ItemStockPrice data should be fetched from server or not. If it is true, means the data has changed on server
     * and needs to refetch it to refresh the local cache copy of ItemStockPrice doument data.*/
    public static get updateCache4ItemStockPrice(): boolean {
        if (TrackStaticDataCache._updateCache4ItemStockPrice) {
            // The property read once so now set it to false expecting the ItemStockPrice's new data will be fetched and cached locally.
            TrackStaticDataCache._updateCache4ItemStockPrice = false;
            return true;
        } else
            return false;
    }

    private static _updateCache4Salesperson: boolean = false;
    /**Gets if the Salesperson data should be fetched from server or not. If it is true, means the data has changed on server
     * and needs to refetch it to refresh the local cache copy of Salesperson doument data.*/
    public static get updateCache4Salesperson(): boolean {
        if (TrackStaticDataCache._updateCache4Salesperson) {
            // The property read once so now set it to false expecting the Salesperson's new data will be fetched and cached locally.
            TrackStaticDataCache._updateCache4Salesperson = false;
            return true;
        } else
            return false;
    }
}